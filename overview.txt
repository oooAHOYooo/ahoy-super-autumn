import os
import zipfile
import tempfile

# Create a temporary directory structure and zip file
def create_ahoy_flask_zip():
    # Create temporary directory
    with tempfile.TemporaryDirectory() as temp_dir:
        project_dir = os.path.join(temp_dir, 'ahoy-flask')
        os.makedirs(project_dir)
        
        # Create directory structure
        os.makedirs(os.path.join(project_dir, 'templates'))
        os.makedirs(os.path.join(project_dir, 'static', 'css'))
        os.makedirs(os.path.join(project_dir, 'static', 'uploads'))
        os.makedirs(os.path.join(project_dir, 'data'))
        
        # File contents
        files = {
            'app.py': '''from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
import json
import os
from datetime import datetime, date
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-this'
app.config['UPLOAD_FOLDER'] = 'static/uploads'

# Ensure upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

class DateEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, date):
            return obj.isoformat()
        return super().default(obj)

def load_events():
    """Load events from JSON file"""
    try:
        with open('data/events.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"events": []}

def save_events(events_data):
    """Save events to JSON file"""
    os.makedirs('data', exist_ok=True)
    with open('data/events.json', 'w') as f:
        json.dump(events_data, f, indent=2, cls=DateEncoder)

def get_upcoming_events():
    """Filter upcoming events"""
    events = load_events()['events']
    today = datetime.now().date()
    upcoming = [e for e in events if datetime.fromisoformat(e['date']).date() >= today]
    return sorted(upcoming, key=lambda x: x['date'])

def get_past_events():
    """Filter past events"""
    events = load_events()['events']
    today = datetime.now().date()
    past = [e for e in events if datetime.fromisoformat(e['date']).date() < today]
    return sorted(past, key=lambda x: x['date'], reverse=True)

# Routes
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/events')
def events():
    upcoming = get_upcoming_events()
    past = get_past_events()
    return render_template('events.html', upcoming=upcoming, past=past)

@app.route('/download')
def download():
    return render_template('download.html')

@app.route('/admin')
def admin():
    events = load_events()['events']
    return render_template('admin.html', events=events)

@app.route('/admin/event/new', methods=['GET', 'POST'])
def new_event():
    if request.method == 'POST':
        event_data = {
            'id': datetime.now().isoformat(),
            'title': request.form['title'],
            'date': request.form['date'],
            'time': request.form.get('time', ''),
            'venue': request.form.get('venue', ''),
            'description': request.form.get('description', ''),
            'type': request.form.get('type', 'show')
        }
        
        events = load_events()
        events['events'].append(event_data)
        save_events(events)
        
        flash('Event added successfully!', 'success')
        return redirect(url_for('admin'))
    
    return render_template('event_form.html', event=None)

@app.route('/admin/event/edit/<event_id>', methods=['GET', 'POST'])
def edit_event(event_id):
    events = load_events()
    event = next((e for e in events['events'] if e['id'] == event_id), None)
    
    if not event:
        flash('Event not found!', 'error')
        return redirect(url_for('admin'))
    
    if request.method == 'POST':
        event.update({
            'title': request.form['title'],
            'date': request.form['date'],
            'time': request.form.get('time', ''),
            'venue': request.form.get('venue', ''),
            'description': request.form.get('description', ''),
            'type': request.form.get('type', 'show')
        })
        
        save_events(events)
        flash('Event updated successfully!', 'success')
        return redirect(url_for('admin'))
    
    return render_template('event_form.html', event=event)

@app.route('/admin/event/delete/<event_id>', methods=['POST'])
def delete_event(event_id):
    events = load_events()
    events['events'] = [e for e in events['events'] if e['id'] != event_id]
    save_events(events)
    flash('Event deleted successfully!', 'success')
    return redirect(url_for('admin'))

if __name__ == '__main__':
    app.run(debug=True)
''',
            
            'requirements.txt': '''Flask==2.3.3
Werkzeug==2.3.7
Jinja2==3.1.2
python-dateutil==2.8.2
''',
            
            'README.md': '''# AHOY Indie Media - Flask Web App

A homemade media company website built with Flask, featuring event management and a clean admin interface.

## Features

- **Public Website**: Home, About, Events, Download pages
- **Admin Panel**: Add, edit, delete events through web interface
- **JSON Data Storage**: Events stored in simple JSON files
- **Responsive Design**: Works on desktop and mobile
- **Yellow & Black Theme**: Matches your original mockups

## Quick Start

1. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Run the app:**
   ```bash
   python app.py
   ```

3. **Visit the site:**
   - Main site: http://localhost:5000
   - Admin panel: http://localhost:5000/admin

## Admin Features

- **Event Management**: Create, read, update, delete events
- **Simple Form Interface**: Easy-to-use forms for event details
- **Automatic Sorting**: Events automatically sorted by date
- **Flash Messages**: User feedback for all actions

## Deployment

Ready for deployment to Heroku, Railway, Render, or any Python hosting service.
Just set your secret key in production!
''',
            
            '.gitignore': '''__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Flask
instance/
.webassets-cache

# Environment variables
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Uploads
static/uploads/*
!static/uploads/.gitkeep
''',
            
            'run.py': '''#!/usr/bin/env python3
"""
Production runner for AHOY Flask app
"""
from app import app
import os

if __name__ == '__main__':
    # Use environment variables for production
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    
    app.run(host='0.0.0.0', port=port, debug=debug)
''',
            
            'templates/base.html': '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}AHOY Indie Media{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-logo">AHOY</a>
            <div class="nav-links">
                <a href="/">Home</a>
                <a href="/about">About</a>
                <a href="/events">Events</a>
                <a href="/download">Download</a>
            </div>
        </div>
    </nav>
    
    <main>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <div class="flash-messages">
                    {% for category, message in messages %}
                        <div class="flash {{ category }}">{{ message }}</div>
                    {% endfor %}
                </div>
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </main>
    
    <footer>
        <div class="footer-logo">AHOY</div>
        <div class="footer-subtitle">INDIE MEDIA</div>
    </footer>
</body>
</html>
''',
            
            'templates/index.html': '''{% extends "base.html" %}

{% block content %}
<div class="hero">
    <h1>AHOY</h1>
    <p>Indie Media from New Haven, CT</p>
    <div class="hero-actions">
        <a href="/events" class="btn btn-primary">Upcoming Events</a>
        <a href="/download" class="btn btn-secondary">Download App</a>
    </div>
</div>

<section class="features">
    <div class="container">
        <h2>What We Do</h2>
        <div class="feature-grid">
            <div class="feature">
                <h3>Live Shows</h3>
                <p>Regular events around New Haven featuring local artists</p>
            </div>
            <div class="feature">
                <h3>Media Platform</h3>
                <p>Cross-platform app for discovering indie content</p>
            </div>
            <div class="feature">
                <h3>Community</h3>
                <p>Supporting local creators and building connections</p>
            </div>
        </div>
    </div>
</section>
{% endblock %}
''',
            
            'templates/about.html': '''{% extends "base.html" %}

{% block content %}
<div class="about-hero">
    <h1>About</h1>
    <p>We are a homemade media company born out of New Haven, CT</p>
</div>

<section class="roadmap">
    <div class="container">
        <h2>OUR ROADMAP</h2>
        <div class="roadmap-items">
            <div class="roadmap-item">
                <h3>Live Shows around New Haven</h3>
                <span class="timeline">q3+ 2025</span>
            </div>
            <div class="roadmap-item">
                <h3>INDIE MEDIA APP FOR THE XBOX - WINDOWS 11 - MAC - LINUX</h3>
                <span class="timeline">q4 2025</span>
            </div>
            <div class="roadmap-item">
                <h3>Launch Online MERCH STORE</h3>
                <span class="timeline">q1 2026</span>
            </div>
            <div class="roadmap-item">
                <h3>PARTNER WITH LOCAL BROADCASTERS</h3>
                <span class="timeline">q2 2026</span>
            </div>
            <div class="roadmap-item">
                <h3>MORE LIVE SHOWS AND CONTENT</h3>
                <span class="timeline">q3 2026</span>
            </div>
        </div>
    </div>
</section>
{% endblock %}
''',
            
            'templates/events.html': '''{% extends "base.html" %}

{% block content %}
<div class="events-header">
    <h1>Events</h1>
</div>

<section class="events-section">
    <div class="container">
        <h2>Upcoming Events</h2>
        {% if upcoming %}
            <div class="events-list">
                {% for event in upcoming %}
                <div class="event-item">
                    <div class="event-date">{{ event.date }}</div>
                    <div class="event-details">
                        <h3>{{ event.title }}</h3>
                        {% if event.venue %}<p class="venue">{{ event.venue }}</p>{% endif %}
                        {% if event.time %}<p class="time">{{ event.time }}</p>{% endif %}
                        {% if event.description %}<p class="description">{{ event.description }}</p>{% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <p>No upcoming events scheduled.</p>
        {% endif %}
    </div>
</section>

<section class="events-section">
    <div class="container">
        <h2>Past Events</h2>
        {% if past %}
            <div class="events-list">
                {% for event in past %}
                <div class="event-item past">
                    <div class="event-date">{{ event.date }}</div>
                    <div class="event-details">
                        <h3>{{ event.title }}</h3>
                        {% if event.venue %}<p class="venue">{{ event.venue }}</p>{% endif %}
                        {% if event.time %}<p class="time">{{ event.time }}</p>{% endif %}
                        {% if event.description %}<p class="description">{{ event.description }}</p>{% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <p>No past events to display.</p>
        {% endif %}
    </div>
</section>
{% endblock %}
''',
            
            'templates/download.html': '''{% extends "base.html" %}

{% block content %}
<div class="download-hero">
    <h1>Launch Web App</h1>
    <p>WATCH MEDIA + LISTEN MUSIC</p>
</div>

<section class="download-section">
    <div class="container">
        <h2>Download Early Beta</h2>
        <p>Full Media Center - Created on Unity for XBOX, PC, MAC, WINDOWS, LINUX + SOme other obscue platform</p>
        
        <div class="download-buttons">
            <a href="#" class="btn btn-download">Download for Windows</a>
            <a href="#" class="btn btn-download">Download for Mac</a>
            <a href="#" class="btn btn-download">Download for Linux</a>
        </div>
        
        <p class="beta-note">Beta version - Features may be limited</p>
    </div>
</section>
{% endblock %}
''',
            
            'templates/admin.html': '''{% extends "base.html" %}

{% block title %}Admin - AHOY Indie Media{% endblock %}

{% block content %}
<div class="admin-header">
    <h1>Admin Panel</h1>
    <a href="{{ url_for('new_event') }}" class="btn btn-primary">Add New Event</a>
</div>

<section class="admin-section">
    <div class="container">
        <h2>Manage Events</h2>
        {% if events %}
            <div class="admin-table">
                <table>
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Venue</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for event in events %}
                        <tr>
                            <td>{{ event.title }}</td>
                            <td>{{ event.date }}</td>
                            <td>{{ event.time or '-' }}</td>
                            <td>{{ event.venue or '-' }}</td>
                            <td class="actions">
                                <a href="{{ url_for('edit_event', event_id=event.id) }}" class="btn btn-small">Edit</a>
                                <form method="POST" action="{{ url_for('delete_event', event_id=event.id) }}" style="display: inline;">
                                    <button type="submit" class="btn btn-small btn-danger" onclick="return confirm('Are you sure?')">Delete</button>
                                </form>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <p>No events found. <a href="{{ url_for('new_event') }}">Add your first event</a>.</p>
        {% endif %}
    </div>
</section>
{% endblock %}
''',
            
            'templates/event_form.html': '''{% extends "base.html" %}

{% block title %}{{ 'Edit' if event else 'New' }} Event - AHOY Indie Media{% endblock %}

{% block content %}
<div class="form-header">
    <h1>{{ 'Edit' if event else 'New' }} Event</h1>
</div>

<section class="form-section">
    <div class="container">
        <form method="POST" class="event-form">
            <div class="form-group">
                <label for="title">Event Title *</label>
                <input type="text" id="title" name="title" value="{{ event.title if event else '' }}" required>
            </div>
            
            <div class="form-group">
                <label for="date">Date *</label>
                <input type="date" id="date" name="date" value="{{ event.date if event else '' }}" required>
            </div>
            
            <div class="form-group">
                <label for="time">Time</label>
                <input type="text" id="time" name="time" value="{{ event.time if event else '' }}" placeholder="e.g., 7pm">
            </div>
            
            <div class="form-group">
                <label for="venue">Venue</label>
                <input type="text" id="venue" name="venue" value="{{ event.venue if event else '' }}" placeholder="e.g., Koffee?">
            </div>
            
            <div class="form-group">
                <label for="type">Event Type</label>
                <select id="type" name="type">
                    <option value="show" {{ 'selected' if event and event.type == 'show' else '' }}>Show</option>
                    <option value="meetup" {{ 'selected' if event and event.type == 'meetup' else '' }}>Meetup</option>
                    <option value="workshop" {{ 'selected' if event and event.type == 'workshop' else '' }}>Workshop</option>
                    <option value="other" {{ 'selected' if event and event.type == 'other' else '' }}>Other</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description" rows="4" placeholder="Event description...">{{ event.description if event else '' }}</textarea>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">{{ 'Update' if event else 'Create' }} Event</button>
                <a href="{{ url_for('admin') }}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</section>
{% endblock %}
''',
            
            'static/css/style.css': ''':root {
    --yellow: #F4C430;
    --dark-gray: #333;
    --light-gray: #666;
    --white: #fff;
    --black: #000;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: var(--dark-gray);
    background: var(--white);
}

/* Navigation */
.navbar {
    background: var(--yellow);
    padding: 1rem 0;
    position: sticky;
    top: 0;
    z-index: 100;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-logo {
    font-size: 2rem;
    font-weight: bold;
    color: var(--black);
    text-decoration: none;
}

.nav-links {
    display: flex;
    gap: 2rem;
}

.nav-links a {
    color: var(--black);
    text-decoration: none;
    font-weight: 500;
    transition: opacity 0.2s;
}

.nav-links a:hover {
    opacity: 0.7;
}

/* Layout */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

main {
    min-height: calc(100vh - 200px);
}

/* Hero Section */
.hero {
    background: var(--yellow);
    padding: 4rem 2rem;
    text-align: center;
    min-height: 50vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.hero h1 {
    font-size: 4rem;
    font-weight: bold;
    color: var(--black);
    margin-bottom: 1rem;
}

.hero p {
    font-size: 1.2rem;
    color: var(--dark-gray);
    margin-bottom: 2rem;
}

.hero-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* Buttons */
.btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: 2px solid var(--black);
    background: var(--white);
    color: var(--black);
    text-decoration: none;
    font-weight: bold;
    transition: all 0.2s;
    cursor: pointer;
    border-radius: 0;
}

.btn:hover {
    background: var(--black);
    color: var(--white);
}

.btn-primary {
    background: var(--black);
    color: var(--white);
}

.btn-primary:hover {
    background: var(--white);
    color: var(--black);
}

.btn-secondary {
    background: transparent;
    color: var(--black);
}

.btn-small {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
}

.btn-danger {
    border-color: #dc3545;
    color: #dc3545;
}

.btn-danger:hover {
    background: #dc3545;
    color: var(--white);
}

/* Features */
.features {
    padding: 4rem 0;
    background: var(--white);
}

.features h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: var(--black);
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.feature {
    text-align: center;
    padding: 2rem;
    border: 2px solid var(--black);
}

.feature h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--black);
}

/* About Page */
.about-hero {
    background: var(--yellow);
    padding: 4rem 2rem;
    text-align: center;
}

.about-hero h1 {
    font-size: 3rem;
    color: var(--black);
    margin-bottom: 1rem;
}

.roadmap {
    padding: 4rem 0;
}

.roadmap h2 {
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 3rem;
    color: var(--black);
}

.roadmap-items {
    max-width: 800px;
    margin: 0 auto;
}

.roadmap-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem;
    margin-bottom: 1rem;
    border: 2px solid var(--black);
    background: var(--white);
}

.roadmap-item h3 {
    font-size: 1.2rem;
    color: var(--black);
    flex: 1;
}

.timeline {
    font-weight: bold;
    color: var(--dark-gray);
    font-size: 1.1rem;
}

/* Events */
.events-header {
    background: var(--yellow);
    padding: 3rem 2rem;
    text-align: center;
}

.events-header h1 {
    font-size: 3rem;
    color: var(--black);
}

.events-section {
    padding: 3rem 0;
}

.events-section h2 {
    font-size: 2rem;
    margin-bottom: 2rem;
    color: var(--black);
}

.events-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.event-item {
    display: flex;
    border: 2px solid var(--black);
    padding: 1.5rem;
    background: var(--white);
}

.event-item.past {
    opacity: 0.7;
}

.event-date {
    min-width: 120px;
    font-weight: bold;
    color: var(--black);
    font-size: 1.1rem;
}

.event-details h3 {
    color: var(--black);
    margin-bottom: 0.5rem;
}

.event-details .venue,
.event-details .time {
    color: var(--light-gray);
    margin-bottom: 0.25rem;
}

.event-details .description {
    color: var(--dark-gray);
    margin-top: 0.5rem;
}

/* Download Page */
.download-hero {
    background: var(--yellow);
    padding: 4rem 2rem;
    text-align: center;
}

.download-hero h1 {
    font-size: 3rem;
    color: var(--black);
    margin-bottom: 1rem;
}

.download-section {
    padding: 4rem 0;
    text-align: center;
}

.download-section h2 {
    font-size: 2rem;
    margin-bottom: 2rem;
    color: var(--black);
}

.download-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    margin: 2rem 0;
}

.btn-download {
    padding: 1rem 2rem;
    font-size: 1.1rem;
}

.beta-note {
    color: var(--light-gray);
    font-style: italic;
    margin-top: 2rem;
}

/* Admin Panel */
.admin-header {
    background: var(--yellow);
    padding: 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
}

.admin-header h1 {
    font-size: 2.5rem;
    color: var(--black);
}

.admin-section {
    padding: 3rem 0;
}

.admin-section h2 {
    margin-bottom: 2rem;
    color: var(--black);
}

.admin-table {
    overflow-x: auto;
}

.admin-table table {
    width: 100%;
    border-collapse: collapse;
    border: 2px solid var(--black);
}

.admin-table th,
.admin-table td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid var(--black);
}

.admin-table th {
    background: var(--yellow);
    font-weight: bold;
    color: var(--black);
}

.admin-table .actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

/* Forms */
.form-header {
    background: var(--yellow);
    padding: 2rem;
    text-align: center;
}

.form-header h1 {
    font-size: 2.5rem;
    color: var(--black);
}

.form-section {
    padding: 3rem 0;
}

.event-form {
    max-width: 600px;
    margin: 0 auto;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
    color: var(--black);
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--black);
    font-size: 1rem;
    font-family: inherit;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--yellow);
    box-shadow: 0 0 0 3px rgba(244, 196, 48, 0.3);
}

.form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-start;
    flex-wrap: wrap;
    margin-top: 2rem;
}

/* Flash Messages */
.flash-messages {
    padding: 1rem 0;
}

.flash {
    max-width: 1200px;
    margin: 0 auto 1rem auto;
    padding: 1rem 2rem;
    border: 2px solid;
    font-weight: bold;
}

.flash.success {
    background: #d4edda;
    border-color: #28a745;
    color: #155724;
}

.flash.error {
    background: #f8d7da;
    border-color: #dc3545;
    color: #721c24;
}

/* Footer */
footer {
    background: var(--yellow);
    padding: 2rem;
    text-align: center;
    margin-top: 4rem;
}

.footer-logo {
    font-size: 3rem;
    font-weight: bold;
    color: var(--black);
    margin-bottom: 0.5rem;
}

.footer-subtitle {
    font-size: 1rem;
    color: var(--black);
    font-weight: bold;
}

/* Responsive */
@media (max-width: 768px) {
    .nav-container {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-links {
        flex-wrap: wrap;
        justify-content: center;
    }
    
    .hero h1 {
        font-size: 3rem;
    }
    
    .roadmap-item {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    
    .event-item {
        flex-direction: column;
    }
    
    .event-date {
        min-width: auto;
        margin-bottom: 0.5rem;
    }
    
    .admin-header {
        text-align: center;
    }
    
    .admin-table .actions {
        flex-direction: column;
    }
    
    .form-actions {
        flex-direction: column;
    }
}
''',
            
            'static/uploads/.gitkeep': '''# Keep this directory in git
''',
            
            'data/events.json': '''{
  "events": [
    {
      "id": "2025-09-24T19:00:00",
      "title": "Poets and Friends",
      "date": "2025-09-24",
      "time": "7pm",
      "venue": "Koffee?",
      "description": "An evening of poetry and music with local New Haven artists",
      "type": "show"
    },
    {
      "id": "2025-09-29T19:00:00",
      "title": "Poets and Friends",
      "date": "2025-09-29",
      "time": "7pm", 
      "venue": "Koffee?",
      "description": "Weekly poetry meetup",
      "type": "show"
    },
    {
      "id": "2025-10-10T21:00:00",
      "title": "Ahoy Show Jams",
      "date": "2025-10-10",
      "time": "9pm",
      "venue": "Koffee?",
      "description": "Live music showcase featuring indie artists",
      "type": "show"
    },
    {
      "id": "2025-10-15T21:00:00", 
      "title": "Ahoy Show Jams",
      "date": "2025-10-15",
      "time": "9pm",
      "venue": "Koffee?", 
      "description": "Monthly live music event",
      "type": "show"
    },
    {
      "id": "2024-12-15T20:00:00",
      "title": "Ahoy Cabaret #1",
      "date": "2024-12-15", 
      "time": "8pm",
      "venue": "Beach Haven",
      "description": "Our first cabaret event - huge success!",
      "type": "show"
    },
    {
      "id": "2025-02-22T19:00:00",
      "title": "Ahoy Cabaret #2", 
      "date": "2025-02-22",
      "time": "7pm",
      "venue": "East Haven",
      "description": "Second installment of our popular cabaret series",
      "type": "show"
    },
    {
      "id": "2025-04-10T19:00:00",
      "title": "Poets and Friends",
      "date": "2025-04-10", 
      "time": "7pm",
      "venue": "Koffee?",
      "description": "Spring poetry gathering",
      "type": "show"
    },
    {
      "id": "2025-05-10T19:00:00",
      "title": "Poets and Friends", 
      "date": "2025-05-10",
      "time": "7pm",
      "venue": "Koffee?",
      "description": "Monthly poetry event continues",
      "type": "show"
    }
  ]
}
'''
        }
        
        # Write all files
        for filepath, content in files.items():
            full_path = os.path.join(project_dir, filepath)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
        
        # Create zip file
        zip_path = 'ahoy-flask.zip'
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(project_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, temp_dir)
                    zipf.write(file_path, arcname)
        
        print(f"Created {zip_path} with complete Flask app structure")
        return zip_path

# This script creates the zip file when run
if __name__ == "__main__":
    create_ahoy_flask_zip()



    ahoy-flask/
├── app.py
├── requirements.txt  
├── README.md
├── .gitignore
├── run.py
├── templates/
│   ├── base.html
│   ├── index.html
│   ├── about.html  
│   ├── events.html
│   ├── download.html
│   ├── admin.html
│   └── event_form.html
├── static/
│   ├── css/
│   │   └── style.css
│   └── uploads/
│       └── .gitkeep
└── data/
    └── events.json